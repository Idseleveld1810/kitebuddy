---
import WeeklyOverview from '../components/WeeklyOverview.jsx';
import spots from "../data/spots_with_wind_top50.json"; // deze moet in src/data blijven voor build
import fs from 'fs';
import path from 'path';

// ✅ Tijdens build: alle mogelijke spotId's doorgeven aan Astro
export async function getStaticPaths() {
  return spots.map((spot) => ({
    params: { spotId: spot.spotId },
  }));
}

const { spotId } = Astro.params;

// ✅ Tijdens runtime: forecast-data uit Open-Meteo API lezen
let forecastData = {};
let source = 'openmeteo';

try {
  const apiUrl = `http://localhost:4321/api/forecast?spotId=${spotId}`;
  const response = await fetch(apiUrl);
  
  if (response.ok) {
    const apiData = await response.json();
    forecastData = apiData.forecast || {};
    source = apiData.source || 'openmeteo';
    console.log(`✅ Loaded Open-Meteo data for ${spotId}:`, Object.keys(forecastData));
  } else {
    console.log(`Open-Meteo API failed for ${spotId}, falling back to file data`);
    throw new Error('API failed');
  }
} catch (error) {
  console.log(`Falling back to file data for ${spotId}`);
  
  // Fallback to file-based data
  try {
    const forecastPath = path.join(process.cwd(), 'public', 'data', 'forecastData', `${spotId}.json`);
    console.log(`Reading forecast data from: ${forecastPath}`);
    
    if (fs.existsSync(forecastPath)) {
      const fileContent = fs.readFileSync(forecastPath, 'utf8');
      forecastData = JSON.parse(fileContent);
      source = 'file';
      console.log(`Loaded file data for ${spotId}:`, Object.keys(forecastData));
    } else {
      console.error(`Forecast file not found: ${forecastPath}`);
    }
  } catch (fileError) {
    console.error(`No file data available for ${spotId}:`, fileError);
  }
}

// Get the proper capitalized spot name
const spotData = spots.find(spot => spot.spotId === spotId);
const spotName = spotData ? spotData.name : spotId;
---

<html lang="nl">
  <head>
    <style is:global>
      @import "../styles/global.css";
    </style>
    <meta charset="UTF-8" />
    <title>Kitesurf Voorspelling – {spotName}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="bg-amber-50 font-sans text-gray-800 min-h-screen">
    <header class="bg-cyan-700 text-white text-center p-3 sm:p-4">
      <h1 class="text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold leading-tight">
        Kitesurf Voorspelling – {spotName}
      </h1>
      <a href="/" class="text-xs sm:text-sm text-cyan-200 hover:text-white mt-2 inline-block min-h-[44px] min-w-[44px] flex items-center justify-center">
        ← Terug naar kaart
      </a>
    </header>

    <main class="w-full py-3 sm:py-4 lg:py-6">
      {Object.keys(forecastData).length > 0 ? (
        <WeeklyOverview client:only="react" forecastData={forecastData} spotId={spotId} source={source} />
      ) : (
        <div class="w-full max-w-2xl mx-auto px-3 sm:px-4 text-center py-8">
          <p class="text-gray-600 text-sm sm:text-base">Geen forecast data beschikbaar voor {spotName}</p>
          <p class="text-xs sm:text-sm text-gray-500 mt-2">Controleer of het bestand /data/forecastData/{spotId}.json bestaat</p>
        </div>
      )}
    </main>
  </body>
</html>
