---
import spots from "../../data/spots_with_wind_top50.json";

const { spotId, date } = Astro.params;

// Get forecast data for the specific date
let forecastData = {};
let source = 'openmeteo';

try {
  const baseUrl = Astro.url.origin;
  const apiUrl = `${baseUrl}/api/forecast?spotId=${spotId}`;
  const response = await fetch(apiUrl);

  if (response.ok) {
    const apiData = await response.json();
    forecastData = apiData.forecast || {};
    source = apiData.source || 'openmeteo';
  }
} catch (error) {
  console.error(`Failed to load data for ${spotId}:`, error);
  forecastData = {};
}

// Find spot details
const spot = spots.find(s => s.spotId === spotId);
const spotName = spot ? spot.name : spotId;

// Convert date to day name for data lookup
const dateObj = new Date(date);
const dayNames = ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag'];
const dayName = dayNames[dateObj.getDay()];

// Get hours for this specific day
const hours = forecastData[dayName] || [];

// Format date for display
const formattedDate = dateObj.toLocaleDateString('nl-NL', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<html lang="nl">
  <head>
    <style is:global>
      @import "../../styles/global.css";
    </style>
    <meta charset="UTF-8" />
    <title>Kitesurf Details – {spotName} – {formattedDate}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="bg-amber-50 font-sans text-gray-800 min-h-screen">
    <header class="bg-cyan-700 text-white text-center p-3 sm:p-4">
      <div class="flex justify-between items-center mb-2">
        <a href="/" class="text-sm text-cyan-200 hover:text-white transition-colors px-2 py-1 rounded hover:bg-cyan-600">
          ← Home
        </a>
        <h1 class="text-xl sm:text-2xl md:text-3xl font-semibold px-4">
          Kitebuddy
        </h1>
        <a href={`/${spotId}`} class="text-sm text-cyan-200 hover:text-white transition-colors px-2 py-1 rounded hover:bg-cyan-600">
          ← Week
        </a>
      </div>
      <p class="text-sm sm:text-base text-cyan-200">
        {spotName} • {formattedDate}
      </p>
    </header>

    <main class="w-full max-w-4xl mx-auto px-3 sm:px-4 lg:px-6 py-3 sm:py-4 lg:py-6">
      {hours.length > 0 ? (
        <div class="space-y-4">
          <!-- Wind Chart -->
          <div class="bg-white rounded-xl p-4 sm:p-6 shadow-sm border border-cyan-100">
            <h2 class="text-lg sm:text-xl font-semibold text-gray-800 mb-4">
              Windsnelheid & Windvlagen
            </h2>
            <div class="relative h-64 sm:h-80">
              <svg class="w-full h-full" viewBox="0 0 800 300">
                <!-- Grid lines -->
                <defs>
                  <pattern id="grid" width="40" height="30" patternUnits="userSpaceOnUse">
                    <path d="M 40 0 L 0 0 0 30" fill="none" stroke="#e5e7eb" stroke-width="1"/>
                  </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#grid)" />
                
                <!-- Y-axis labels (wind speed) -->
                <text x="20" y="20" class="text-xs fill-gray-600">30 kn</text>
                <text x="20" y="80" class="text-xs fill-gray-600">20 kn</text>
                <text x="20" y="140" class="text-xs fill-gray-600">15 kn</text>
                <text x="20" y="200" class="text-xs fill-gray-600">10 kn</text>
                <text x="20" y="260" class="text-xs fill-gray-600">5 kn</text>
                
                <!-- Wind speed line -->
                <polyline
                  fill="none"
                  stroke="#0891b2"
                  stroke-width="3"
                  points={hours.map((hour, index) => {
                    const x = 60 + (index * (740 / (hours.length - 1)));
                    const windSpeed = hour.speed || 0;
                    const y = 280 - (windSpeed * 8); // Scale: 30kn = 40px from top
                    return `${x},${y}`;
                  }).join(' ')}
                />
                
                <!-- Wind gusts line -->
                <polyline
                  fill="none"
                  stroke="#dc2626"
                  stroke-width="2"
                  stroke-dasharray="5,5"
                  points={hours.map((hour, index) => {
                    const x = 60 + (index * (740 / (hours.length - 1)));
                    const windGust = hour.gust || hour.speed || 0;
                    const y = 280 - (windGust * 8);
                    return `${x},${y}`;
                  }).join(' ')}
                />
                
                <!-- Time labels -->
                {hours.map((hour, index) => {
                  if (index % 2 === 0) { // Show every 2nd hour
                    const x = 60 + (index * (740 / (hours.length - 1)));
                    return `<text x="${x}" y="295" class="text-xs fill-gray-600" text-anchor="middle">${hour.time}</text>`;
                  }
                  return '';
                }).join('')}
                
                <!-- Legend -->
                <g transform="translate(650, 20)">
                  <line x1="0" y1="0" x2="30" y2="0" stroke="#0891b2" stroke-width="3"/>
                  <text x="35" y="5" class="text-xs fill-gray-700">Windsnelheid</text>
                  <line x1="0" y1="15" x2="30" y2="15" stroke="#dc2626" stroke-width="2" stroke-dasharray="5,5"/>
                  <text x="35" y="20" class="text-xs fill-gray-700">Windvlagen</text>
                </g>
              </svg>
            </div>
          </div>

          <!-- Hourly Details -->
          <div class="bg-white rounded-xl p-4 sm:p-6 shadow-sm border border-cyan-100">
            <h2 class="text-lg sm:text-xl font-semibold text-gray-800 mb-4">
              Uurlijkse details
            </h2>
            <div class="overflow-x-auto">
              <table class="w-full text-sm">
                <thead>
                  <tr class="border-b border-gray-200">
                    <th class="text-left py-2 px-1">Tijd</th>
                    <th class="text-center py-2 px-1">Wind</th>
                    <th class="text-center py-2 px-1">Windvlaag</th>
                    <th class="text-center py-2 px-1">Richting</th>
                    <th class="text-center py-2 px-1">Golfhoogte</th>
                    <th class="text-center py-2 px-1">Neerslag</th>
                  </tr>
                </thead>
                <tbody>
                  {hours.map((hour, index) => {
                    const windSpeed = hour.speed || 0;
                    const windColor = windSpeed < 13 ? 'text-cyan-300' : windSpeed < 16 ? 'text-blue-500' : 'text-green-500';
                    const windDir = hour.dir || 0;
                    const rotation = (windDir + 180) % 360;
                    
                    return (
                      <tr key={index} class="border-b border-gray-100 hover:bg-gray-50">
                        <td class="py-2 px-1 font-medium">{hour.time}</td>
                        <td class={`py-2 px-1 text-center font-semibold ${windColor}`}>
                          {windSpeed} kn
                        </td>
                        <td class="py-2 px-1 text-center text-gray-600">
                          {hour.gust || 0} kn
                        </td>
                        <td class="py-2 px-1 text-center">
                          <div class="inline-block transform" style={`transform: rotate(${rotation}deg)`}>
                            ↑
                          </div>
                        </td>
                        <td class="py-2 px-1 text-center text-gray-600">
                          {hour.waveHeight ? `${hour.waveHeight}m` : '-'}
                        </td>
                        <td class="py-2 px-1 text-center text-gray-600">
                          {hour.rain || 0}mm
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      ) : (
        <div class="bg-white rounded-xl p-8 text-center shadow-sm border border-cyan-100">
          <h2 class="text-xl font-semibold text-gray-800 mb-2">Geen data beschikbaar</h2>
          <p class="text-gray-600">Er zijn geen voorspellingsgegevens beschikbaar voor deze dag.</p>
          <a href={`/${spotId}`} class="inline-block mt-4 bg-cyan-600 text-white px-4 py-2 rounded-lg hover:bg-cyan-700 transition-colors">
            Terug naar weekoverzicht
          </a>
        </div>
      )}
    </main>
  </body>
</html>
