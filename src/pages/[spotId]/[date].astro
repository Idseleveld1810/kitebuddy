---
import BaseLayout from '../../layouts/BaseLayout.astro';
import WindChart from '../../components/WindChart.jsx';
import WeatherTable from '../../components/WeatherTable.jsx';
import spots from '../../data/spots_with_wind_top50.json';
import fs from 'fs';
import path from 'path';

export async function getStaticPaths() {
  const today = new Date();
  const paths = [];
  
  // Generate paths for the next 14 days
  for (let i = 0; i < 14; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    const dateStr = date.toISOString().split('T')[0];
    
    // Generate paths for each spot
    for (const spot of spots) {
      paths.push({
        params: { spotId: spot.spotId, date: dateStr }
      });
    }
  }
  
  return paths;
}

const { spotId, date } = Astro.params;

// Try to fetch data from Stormglass API first
let data = [];
let source = 'stormglass';
let lastUpdated = null;

try {
  const apiUrl = `http://localhost:4321/api/day?spotId=${spotId}&date=${date}`;
  const response = await fetch(apiUrl);
  
  if (response.ok) {
    const apiData = await response.json();
    data = apiData.data || [];
    source = apiData.source || 'stormglass';
    lastUpdated = apiData.lastUpdated || null;
  } else {
    console.log(`Stormglass API failed for ${spotId} on ${date}, falling back to file data`);
    throw new Error('API failed');
  }
} catch (error) {
  console.log(`Falling back to file data for ${spotId} on ${date}`);
  
  // Fallback to file-based data
  try {
    const forecastPath = path.join(process.cwd(), 'public', 'data', 'forecastData', `${spotId}.json`);
    
    if (fs.existsSync(forecastPath)) {
      const fileContent = fs.readFileSync(forecastPath, 'utf8');
      const forecastData = JSON.parse(fileContent);
      
      const dateObj2 = new Date(date);
      const dayName2 = ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"][dateObj2.getDay()];
      data = forecastData[dayName2] || [];
      source = 'file';
      
      console.log(`Loaded file data for ${spotId} on ${dayName2}:`, data.length, 'entries');
    } else {
      console.error(`Forecast file not found: ${forecastPath}`);
      data = [];
      source = 'none';
    }
  } catch (fileError) {
    console.error(`No file data available for ${spotId} on ${date}:`, fileError);
    data = [];
    source = 'none';
  }
}

// Parse the date and determine which day of the week it is
const dateObj = new Date(date);
const dayName = ['zondag','maandag','dinsdag','woensdag','donderdag','vrijdag','zaterdag'][dateObj.getDay()];
const shortDate = dateObj.toLocaleDateString("nl-NL", { day: 'numeric', month: 'short' });

// Get the proper capitalized spot name
const spotData = spots.find(spot => spot.spotId === spotId);
const spotName = spotData ? spotData.name : spotId;

// Check if current data is available and if it's today
const today = new Date().toISOString().split('T')[0];
const isToday = date === today;
const hasCurrentData = isToday && data.some(entry => entry.currentSpeed !== null && entry.currentSpeed > 0);
---

<html lang="nl">
  <head>
    <style is:global>
      @import "../../styles/global.css";
    </style>
    <meta charset="UTF-8" />
    <title>Kitebuddy - {spotName} - {shortDate}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="bg-amber-50 font-sans text-gray-800 min-h-screen">
    <header class="bg-cyan-700 text-white text-center p-3 sm:p-4">
      <h1 class="text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold leading-tight">
        Kitesurf voorspelling
      </h1>
      <p class="text-sm sm:text-base mt-1">
        {spotName} - {shortDate}
      </p>
      <div class="flex flex-col sm:flex-row gap-2 mt-2 justify-center">
        <a href={`/${spotId}`} class="inline-block px-3 py-1 bg-cyan-600 hover:bg-cyan-500 rounded text-sm transition-colors duration-200">
          ‚Üê Week overzicht
        </a>
        <a href="/" class="inline-block px-3 py-1 bg-cyan-500 hover:bg-cyan-400 rounded text-sm transition-colors duration-200">
          üó∫Ô∏è Terug naar kaart
        </a>
      </div>
    </header>

    <div class="w-full max-w-4xl mx-auto px-3 sm:px-4 lg:px-6 py-3 sm:py-4 space-y-3 sm:space-y-4">
      {data.length > 0 ? (
        <div>
          <div class="bg-white rounded-lg sm:rounded-xl shadow-sm border border-cyan-100 p-3 sm:p-4">
            <WindChart client:only="react" data={data} />
          </div>

          <div class="bg-white rounded-lg sm:rounded-xl shadow-sm border border-cyan-100 overflow-hidden">
            <WeatherTable 
              client:only="react"
              data={data}
              source={source}
              isToday={isToday}
              hasCurrentData={hasCurrentData}
            />
          </div>
          
                  {source === 'openmeteo' && (
          <div class="bg-green-50 border border-green-200 rounded-lg p-3 text-xs text-green-700">
            üå§Ô∏è <strong>Open-Meteo Weather Data:</strong> High-quality wind forecasts from Open-Meteo
          </div>
        )}
          
          {lastUpdated && (
            <div class="text-center text-xs text-gray-500 mt-4">
              üìÖ <strong>Data last updated:</strong> {new Date(lastUpdated).toLocaleString('nl-NL')}
              {source === 'cache' && (
                <span class="text-green-600 ml-2">üîÑ Served from cache</span>
              )}
            </div>
          )}
        </div>
      ) : (
        <div class="text-center py-8 px-4">
          <p class="text-gray-600 text-sm sm:text-base">Geen forecast data beschikbaar voor {spotName} op {shortDate}</p>
          <p class="text-xs sm:text-sm text-gray-500 mt-2">Controleer of het bestand /data/forecastData/{spotId}.json bestaat</p>
        </div>
      )}
    </div>
  </body>
</html>
