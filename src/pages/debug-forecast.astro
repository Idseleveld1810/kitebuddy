---
// Debug pagina om forecast data structuur te inspecteren
import spots from "../data/spots_with_wind_top50.json";

// Test met eerste spot
const testSpot = spots[0];
---

<html lang="nl">
  <head>
    <meta charset="UTF-8" />
    <title>Debug Forecast Data - Kitebuddy</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-amber-50 font-sans text-gray-800 min-h-screen p-4">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-2xl font-bold text-gray-800 mb-6">üîç Debug Forecast Data</h1>
      
      <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Test Spot: {testSpot.name}</h2>
        <p class="text-gray-600 mb-4">Spot ID: {testSpot.spotId}</p>
        <p class="text-gray-600">Co√∂rdinaten: {testSpot.latitude}, {testSpot.longitude}</p>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Forecast Data Test</h2>
        <div id="forecast-data" class="text-sm font-mono bg-gray-100 p-4 rounded overflow-auto max-h-96">
          Laden...
        </div>
      </div>
    </div>

    <script>
      async function testForecastData() {
        const container = document.getElementById('forecast-data');
        
        try {
          // Test API call
          const apiUrl = `http://localhost:4321/api/forecast?spotId=${testSpot.spotId}`;
          console.log('üåê Testing API:', apiUrl);
          
          const response = await fetch(apiUrl);
          const data = await response.json();
          
          console.log('üìä API Response:', data);
          
          // Display data structure
          container.innerHTML = `
            <h3 class="font-semibold mb-2">API Response:</h3>
            <pre class="text-xs">${JSON.stringify(data, null, 2)}</pre>
            
            <h3 class="font-semibold mt-4 mb-2">Data Analysis:</h3>
            <ul class="text-sm space-y-1">
              <li>‚úÖ Source: ${data.source || 'unknown'}</li>
              <li>‚úÖ Has forecast: ${data.forecast ? 'Yes' : 'No'}</li>
              <li>‚úÖ Forecast keys: ${data.forecast ? Object.keys(data.forecast).join(', ') : 'None'}</li>
              ${data.forecast ? `
                <li>‚úÖ Sample day data: ${Object.keys(data.forecast)[0] || 'None'}</li>
                ${data.forecast[Object.keys(data.forecast)[0]] ? `
                  <li>‚úÖ Hours count: ${data.forecast[Object.keys(data.forecast)[0]].length}</li>
                  <li>‚úÖ Sample hour data: ${JSON.stringify(data.forecast[Object.keys(data.forecast)[0]][0], null, 2)}</li>
                ` : '<li>‚ùå No hours data</li>'}
              ` : ''}
            </ul>
          `;
          
        } catch (error) {
          console.error('‚ùå API Error:', error);
          container.innerHTML = `
            <div class="text-red-600">
              <h3 class="font-semibold">‚ùå API Error:</h3>
              <p>${error.message}</p>
            </div>
          `;
        }
      }

      // Run test when page loads
      testForecastData();
    </script>
  </body>
</html>
